syntax = "proto3";

//帮助web端向客户端发送消息

package cfwf.micro_service.monitor;

service Monitor {  
  /* 微服务统一监控配置中心  */
  
  // 获取微服务地址
  rpc GetMicroServiceAddress(GetMicroServiceAddressRequest) returns (GetMicroServiceAddressResponse) {} 
  // 获取数据库连接配置
  rpc GetDatabaseServerAddress(GetDatabaseServerAddressRequest) returns (GetDatabaseServerAddressResponse) {}   
  // 获取rabbitmq连接配置
  rpc GetRabbitMqServerAddress (GetRabbitMqServerAddressRequest) returns (GetRabbitMqServerAddressResponse) {}
  // 获取redis连接配置
  rpc GetRedisServerAddress (GetRedisServerAddressRequest) returns (GetRedisServerAddressResponse) {}
  // 微服务上报运行状态，同时获取配置信息最新修改时间  
  rpc ReportRunStatus(ReportRunStatusRequest) returns (ReportRunStatusResponse) {}
  
  
  /* 客户端安装包、升级包发布、获取、管理  */
  
  //发布新版本
  rpc PublishNewClientVersion (PublishNewClientVersionRequest) returns (PublishNewClientVersionResponse) {} 
  //修改版本
  rpc ModifyClientVersion (ModifyClientVersionRequest) returns (ModifyClientVersionResponse) {}
  //撤销版本
  rpc CancelClientVersion (CancelClientVersionRequest) returns (CancelClientVersionResponse) {}  
  //获取版本列表
  rpc GetClientVersionList (GetClientVersionListRequest) returns (GetClientVersionListResponse) {}
  //增加下载次数
  rpc AddClientVersionDownloadCount (AddClientVersionDownloadCountRequest) returns (AddClientVersionDownloadCountResponse) {}
  
  //获取当前版本信息
  rpc GetCurrentClientVersion(GetCurrentClientVersionRequest) returns (GetCurrentClientVersionResponse) {}
  //获取升级包更新列表
  rpc GetUpgradeFileList(GetUpgradeFileListRequest) returns (GetUpgradeFileListResponse) {}
}

// 通用返回结果
enum RPC_CALL_RESULT {
   RPC_CALL_RESULT_NONE        = 0;   //不应出现
   RPC_CALL_RESULT_SUCCESS     = 1;   //成功
   RPC_CALL_RESULT_SERVICE_ERROR = 2; //微服务操作失败
   RPC_CALL_RESULT_INPUT_ERROR = 3;   //传入数据格式错误或不合法
}

// 获取配置信息
message GetMicroServiceAddressRequest {
	int32 service_id = 1; //调用者的 serviceid
    int32 version = 2;    //调用者本地已存在的版本
}

message MicroServiceAddress{
	int32 service_id = 1;  
	string ip = 2;       
	int32 port = 3;    
}

message GetMicroServiceAddressResponse {
    RPC_CALL_RESULT result = 1;
    int32 version = 2;
	repeated MicroServiceAddress list = 3; //返回有更新的微服务地址列表，只返回比 request.version 大的条目，也就是有更新的条目
}

message GetDatabaseServerAddressRequest {
	int32 service_id = 1; //调用者的 serviceid
    int32 version = 2;    //调用者本地已存在的版本
    repeated string database_list = 3; //想要获取的database 名称列表，必须填写完整名称
}

message DataBaseConnAttr{
    string dbname = 1; //保存 rabbitmq 连接属性时，此字段保存 vhost 
    
	string host  = 2;
	int32 port = 3;
	string username = 4;
    string password = 5;
    
	string slave_host  = 6;
	int32 slave_port = 7;
	string slave_username = 8;
    string slave_password = 9;    
}

message GetDatabaseServerAddressResponse {
    RPC_CALL_RESULT result = 1;
    int32 version = 2;
	repeated DataBaseConnAttr list = 3;  //只返回比 request.version 大的条目，也就是有更新的条目
}

message GetRabbitMqServerAddressRequest {
	int32 service_id = 1; //调用者的 serviceid
    int32 version = 2;    //调用者本地已存在的版本
    repeated string vhost_list = 3; //想要获取的rabbitmq vhost名称列表，必须填写完整名称
}

message GetRabbitMqServerAddressResponse {
    RPC_CALL_RESULT result = 1;
    int32 version = 2;
	repeated DataBaseConnAttr list = 3;  //只返回比 request.version 大的条目，也就是有更新的条目
}

message GetRedisServerAddressRequest {
	int32 service_id = 1; //调用者的 serviceid
    int32 version = 2;    //调用者本地已存在的版本
    repeated string database_list = 3; //想要获取的 redis数据库名称列表，必须填写完整名称
}

message GetRedisServerAddressResponse {
    RPC_CALL_RESULT result = 1;
    int32 version = 2;
	repeated DataBaseConnAttr list = 3;  //只返回比 request.version 大的条目，也就是有更新的条目
}

// 上报运行状态，同时获取配置信息最新修改时间 
message MethodCall {
	string method_name = 1; 
    int32 call_count = 2;   
    int32 success_count = 3;
}

message ReportRunStatusRequest {
	int32 service_id = 1;     //调用者的 serviceid
    int64 time_begin = 2;     //时间戳
    int64 time_end = 3;       //时间戳
    repeated MethodCall list = 4; //接口调用统计
}

message ReportRunStatusResponse {
    RPC_CALL_RESULT result = 1;
    int32 micro_service_addr_version = 2;
    int32 database_attr_version = 3;
    int32 redis_attr_version = 4;
    int32 rabbitmq_attr_version = 5;
}


//客户端安装包、升级包发布、获取、管理
message UpgradeFileInfo {
	string src = 1;    //下载地址，绝对 url地址
    string dest = 2;   //安装到目标地址。  预定义目录： [application]:安装目录，也就是caibao.exe所在的目录； [windows]: 系统的windows目录； [system]: windows/system32目录; [update]:下载缓存目录
                       //如果既没有包含预定义目录，也不是绝对路径，则默认为 [application] 的相对路径
    int32 size = 3;    //文件大小
    string md5 = 4;    //文件的md5
    string action = 5; //取值： setup(执行) regist(拷贝覆盖到目标地址，并注册) copy(拷贝覆盖到目标地址) unzip(解压到目标地址)   默认为copy
}

message ClientIpScope {
    string from_ip = 1;
    string to_ip = 2;
}

enum VersionStatus{
    kVersionStatusNone = 0;
    kVersionStatusPublish = 1; //正常状态，当前版本。在有“定向更新”的功能的前提下，可能存在多个当前发布版本
    kVersionStatusCanceled = 2;//已撤销
    kVersionStatusTimeout = 3; //已过期(有新版本发布了，老版本自动过期)
}

message ClientVersionInfo {
    int32 os = 1;             //1=pc 2=android 3=ios
    string version = 2;       //版本号
    string setupfile_url = 3; //安装文件下载地址，全路径 
    int32 setupfile_size = 4; //安装文件大小，单位： Byte
    repeated UpgradeFileInfo update_files = 5; //升级文件(PC静默安装) 列表
    string effective_time = 6; //生效时间。发布时如果不填写则取当前时间
    repeated ClientIpScope client_ip_scope = 7; //定向更新ip范围
    string description = 8;    //升级说明
    string userid = 9;         //发布人
    VersionStatus status = 10;    //状态。 发布或修改时不用填写
    int32  download_count = 11;   //已下载次数。 发布或修改时不用填写
    string create_time = 12; //版本创建时间，发布时间。发布或修改时不用填写
}

message PublishNewClientVersionRequest{
   string operatorid = 1;    //操作人
   ClientVersionInfo version_info = 2;  
}

message PublishNewClientVersionResponse {
    RPC_CALL_RESULT result = 1;
}

message ModifyClientVersionRequest{
   string operatorid = 1;    //操作人
   ClientVersionInfo version_info = 2;  
}

message ModifyClientVersionResponse {
    RPC_CALL_RESULT result = 1;
}


message CancelClientVersionRequest{
   string operatorid = 1;    //操作人
   int32 os = 2;             //1=pc 2=android 3=ios
   string version = 3;       //版本号
}

message CancelClientVersionResponse {
    RPC_CALL_RESULT result = 1;
}

message GetClientVersionListRequest{
   int32 page_size = 1;       //每页条数
   int32 page = 2;            //当前页。如果>总页数，则返回最后一页的数据
   int32 os = 3;              //1=pc 2=android 3=ios
}

message GetClientVersionListResponse
{
    RPC_CALL_RESULT result = 1;
	int32 page_size = 2;        //每页条数
    int32 page = 3;             //当前页
    int32 page_count = 4;       //总页数
    int32 record_count = 5;     //总条数
    repeated ClientVersionInfo list = 6; //当前页结果列表
}

message AddClientVersionDownloadCountRequest{
   int32 os = 1;             //下载哪个端的  1=pc 2=android 3=ios  
   string version = 2;       //下载哪个版本。 可不填，默认为非限定范围的当前版本。如果是限定ip范围的坂本，需要填写版本号
   string ip = 3;            //下载者的ip
}

message AddClientVersionDownloadCountResponse {
    RPC_CALL_RESULT result = 1;
}

message GetCurrentClientVersionRequest{
   int32 os = 1; 
   string ip = 2; 
}

message GetCurrentClientVersionResponse{
    RPC_CALL_RESULT result = 1;
    int32 os = 2;             //1=pc 2=android 3=ios
    string version = 3;       //版本号
    string setupfile_url = 4; //安装文件下载地址，全路径 
    int32 setupfile_size = 5; //安装文件大小，单位： Byte
    string description = 6;    //升级说明
}

message GetUpgradeFileListRequest{
   int32 os = 1;  //目前固定为1 (pc)
   string client_version = 2; //客户端版本号
   string client_ip = 3; //客户端ip
}

message VersionUpgradeFiles{
    string version = 1;
    repeated UpgradeFileInfo update_files = 2; //升级文件(PC静默安装) 列表
}

message GetUpgradeFileListResponse
{
    RPC_CALL_RESULT result = 1;
    repeated VersionUpgradeFiles list = 2;
}
