syntax = "proto3";

//account: 帐号管理

package cfwf.micro_service.account;
option java_package = "com.cfwf.micro_service.account";

service Account { 

  //--------------------------------------- 注册新用户
  //检查手机号是否可用(在调用RegistNewAccountByMobilePhone 之前应先调用此接口检查) CommonRequest.msg==手机号 
  rpc CheckMobilePhoneAvailable (CommonRequest) returns (CheckMobilePhoneAvailableResponse) {} 
  
  //使用手机注册
  rpc RegistNewAccountByMobilePhone (RegistNewAccountByMobilePhoneRequest) returns (RegistNewAccountResponse) {}
  
  //注册，可指定账号。指定账号时，账号必须大于100000，小于 10000000 ，防止和新建账号冲突
  rpc RegistNewAccount (RegistNewAccountRequest) returns (RegistNewAccountResponse) {}
  
  //批量注册
  rpc BatchRegistNewAccount (BatchRegistNewAccountRequest) returns (BatchRegistNewAccountResponse) {}
  
  //--------------------------------------- 设置    
  //设置用户的某个身份
  rpc SetUserIdentity (SetUserIdentityRequest) returns (CommonResponse) {} 
  
  //设置用户的所属单位
  rpc SetBelongUnit (SetBelongUnitRequest) returns (CommonResponse) {} 
  
  //设置用户基本信息  传入参数中，UserBaseInfo.main_identity 将会被忽略，而使用系统定义的身份顺序。cb_id可不填写， userid必填
  rpc SetUserBaseInfo (SetUserBaseInfoRequest) returns (CommonResponse) {}  
  
  //设置用户某项信息
  rpc SetUserInfoItem (SetUserInfoItemRequest) returns (CommonResponse) {}  
  
  //设置用户验证好友方式
  rpc SetUserFriendCheck (SetUserFriendCheckRequest) returns (CommonResponse) {}  
  
  //绑定/修改 手机。绑定之前应调用CheckMobilePhoneAvailable检查手机是否可用
  rpc BindMobile (BindMobileRequest) returns (CommonResponse) {} 
  
  //删除用户心情
  rpc DeleteUserMood(DeleteUserMoodRequest) returns (CommonResponse) {}
  
   //--------------------------------------- 查询  
  //获取登录者基本信息
  rpc GetMyBaseInfo (GetMyBaseInfoRequest) returns (GetMyBaseInfoResponse) {}

  //获取其他用户基本信息
  rpc GetUserBaseInfo (GetUserBaseInfoRequest) returns (GetUserBaseInfoResponse) {}

  //获取其他用户极简信息
  rpc GetUserSimpleInfo (GetUserSimpleRequest) returns (GetUserSimpleResponse) {}
  
  //根据 cb id 查询用户基本信息
  rpc QueryUserBaseInfoByCBId (QueryUserBaseInfoByCBIdRequest) returns (QueryUserBaseInfoByCBIdResponse) {}

  //获取用户验证好友方式
  rpc GetUserFriendCheck (GetUserFriendCheckRequest) returns (GetUserFriendCheckResponse) {}  
 
  //搜索用户
  rpc SearchUserBaseInfo (SearchUserBaseInfoRequest) returns (SearchUserBaseInfoResponse) {}
  
  //根据登录名获取 userid
  rpc GetUserId (GetUserIdRequest) returns (GetUserIdResponse) {}

  //--------------------------------------- 运维管理    
  //设置用户状态: 限权、 限功能、 限制登录、 屏蔽其所发内容等
  rpc SetUserStatus (SetUserStatusRequest) returns (CommonResponse) {}  
  
  // 获取账户绑定的手机号
  rpc GetBindedPhoneNumber(GetBindedPhoneNumberRequest) returns (GetBindedPhoneNumberResponse) {}
  
} 

// 通用返回结果
enum RPC_CALL_RESULT {
   RPC_CALL_RESULT_NONE        = 0;   //不应出现
   RPC_CALL_RESULT_SUCCESS     = 1;   //成功
   RPC_CALL_RESULT_DB_ERROR    = 2;   //数据库出错：数据库连接失败、操作失败等
   RPC_CALL_RESULT_INPUT_ERROR = 3;   //传入数据格式错误或不合法
   RPC_CALL_RESULT_ITEM_NOT_EXIST  = 4;   //对应条目不存在，"获取"["删除"/"修改"]单条数据时，若找不到对应数据，则返回该值
   RPC_CALL_RESULT_ITEM_HAS_EXIST  = 5;   //对应条目已存在，"创建"单条数据或批量数据时，若发现已存在相同数据则返回该值； "修改"时，发现除了要修改的对象外，还有其他数据和修改后的数据出现重复时，则不做修改并返回该值
}

//一般rpc调用请求
message CommonRequest{
	string msg = 1;
}

//一般rpc调用返回值
message CommonResponse{
	RPC_CALL_RESULT result = 1;
	string msg = 2;
} 


enum USER_SEX{
	USER_SEX_INIT = 0;
    USER_SEX_GIRL = 1;
    USER_SEX_BOY  = 2;   
}

enum USER_IDENTITY_TYPE {
   USER_IDENTITY_TYPE_NONE                = 0;
   USER_IDENTITY_TYPE_STUDENT             = 1;   //中小学学生
   USER_IDENTITY_TYPE_TEACHER             = 2;   //中小学教师
   USER_IDENTITY_TYPE_SCHOOL_MANAGER      = 3;   //中小学教务管理人员，校长
   USER_IDENTITY_TYPE_TEACH_RESEARCHER    = 4;   //中小学教研员
   USER_IDENTITY_TYPE_STUDENT_PARENT      = 5;   //中小学生家长
   
   USER_IDENTITY_TYPE_COLLEGE_STUDENT     = 11;   //高职高校学生
   USER_IDENTITY_TYPE_COLLEGE_TEACHER     = 12;   //高职高校教师
   USER_IDENTITY_TYPE_COLLEGE_MANAGER     = 13;   //高职高校教务管理人员，校长
   
   USER_IDENTITY_TYPE_EDU_MANAGEMENT      = 21;   //教育系统管理人员
   USER_IDENTITY_TYPE_COMMERCIAL          = 31;   //商业机构用户
}
 
enum BELONG_UNIT_TYPE ////所属单位类型
{
    BELONG_UNIT_TYPE_NONE = 0;     
    BELONG_UNIT_TYPE_SCHOOL = 1;   //自动统一
    BELONG_UNIT_TYPE_EDU_BUREAU = 2; //教育局
    BELONG_UNIT_TYPE_TEACH_OFFICE = 3;  //教研室
}


//----------------------------------------------------------------注册新用户

// RegistNewAccountByMobilePhone 本服务不管理用户密码。密码需调用 tokencheck微服务设置。调用该函数之前，必须保证mobile_phone是已经验证过的。
message RegistNewAccountByMobilePhoneRequest{
    string cb_id = 1;  //全局唯一，公开，方便使用者标识用户、对好友进行查找定位，用于替换数字型的公开的userid。不用作登录帐号。可指定，若不指定则系统自动生成
    string mobile_phone = 2; //必须填写
    string username = 3; //用户民、昵称
	string password = 4; //密码
    USER_IDENTITY_TYPE identity = 5; //用户身份
}  

message RegistNewAccountResponse{
    RPC_CALL_RESULT result = 1;
    
    string errmsg = 2; //如果注册失败，返回失败原因    
    string cb_id = 3; 
    fixed64 userid = 4;
}

//注册，可指定账号
message RegistNewAccountRequest{
    string cb_id = 1;        //可填可不填
    string mobile_phone = 2; //可填可不填
    string username = 3;     //用户民、昵称，必填
	string password = 4;     //密码，必填
    USER_IDENTITY_TYPE identity = 5; //用户身份
    fixed64 userid = 6;      //如果指定，则该userid在系统内不能存在
    string email = 7;        //可填可不填
}

  
//批量注册
message BatchRegistInfo {
	string mobile_phone = 1; //手机号
    string username = 2; //用户民、昵称
	string password = 3; //密码	
	USER_IDENTITY_TYPE identity = 4; //用户身份
}

message BatchRegistResponseInfo {
	string mobile_phone = 1; //手机号
    string username = 2; //用户民、昵称
	bool success = 3; //是否注册成功 
	string errmsg = 4; //如果注册失败，返回失败原因    
    string cb_id = 5;  //才宝账号
    fixed64 userid = 6; //用户账号
}

message BatchRegistNewAccountRequest {
	repeated BatchRegistInfo list = 1;
}

message BatchRegistNewAccountResponse {
	RPC_CALL_RESULT result = 1;
	repeated BatchRegistResponseInfo list = 2;
}

message CheckMobilePhoneAvailableResponse{
	RPC_CALL_RESULT result = 1;
	int32 check_result = 2; //手机号检测结果  1--手机号未注册过 2--手机号已经注册
}
 
// ActiveAccount
message ActiveAccountRequest{
    fixed64 userid = 1;
    string active_code = 2;
} 

//------------------------------------------------------------------------------ 设置 

message UserIdentity
{  
    bool is_student = 1; //是否中小学学生
    bool is_teacher = 2; //是否中小学教师
    bool is_school_manager = 3; //是否中小学教务管理人员，校长
    bool is_teach_researcher = 4; //是否中小学教研员
    bool is_student_parent = 5; //是否中小学生家长
    
    bool is_college_student = 6; //是否 高职高校学生
    bool is_college_teacher= 7;//是否 高职高校教师
    bool is_college_manager= 8;//是否 高职高校教务管理人员，校长
    
    bool is_edu_management= 9;//是否 教育系统管理人员
    bool is_commercial= 10;//是否 商业机构用户
}

message DeleteUserMoodRequest 
{
	fixed64 userid = 1;
}

//用户基本信息
message UserBaseInfo
{
    fixed64 userid = 1;
    string cb_id = 2;
    UserIdentity identity = 3; //用户身份
    string username = 4;
    string user_face = 5;
    int32 default_face = 6; //为何有两个face? 在客户端列表好友时，若本地无好友自定义头像，则自定义头像延迟下载，先显示系统头像
    USER_SEX sex = 7;
    int32  cityid = 8;
    string mood = 9;
    int32 birthday = 10;
    string bind_mobile = 11; //绑定的手机号
    
    BELONG_UNIT_TYPE belong_unittype = 12;
    fixed64 belong_unitid = 13;
}

//用户简单信息
message UserSimpleInfo
{
    fixed64 userid = 1;
    string username = 2;
    string user_face = 3; //用户自定义头像，如果该项没有值，则使用系统头像。 本接口数据一般用于网页上列表显示用户信息，无客户端延迟下载缓存头像需求
	int32 default_face = 4; //系统头像
}

enum FREIND_CHECK_TYPE
{
    FREIND_CHECK_TYPE_DEFAULT = 0; //默认 == 2
    FREIND_CHECK_TYPE_AGREE = 1; //自动统一
    FREIND_CHECK_TYPE_APPROVE = 2; //审核
    FREIND_CHECK_TYPE_REFUSE = 3; //自动拒绝
}

// SetUserIdentity 设置用户的某个身份
message SetUserIdentityRequest
{
    fixed64 userid = 1;
    USER_IDENTITY_TYPE identity = 2;
    bool has_this_identity = 3;
}


message SetBelongUnitRequest
{
    fixed64 operatorid = 1;
    fixed64 userid = 2;
    BELONG_UNIT_TYPE unit_type = 3;
    fixed64 unit_id = 4;
}

// SetUserAllIdentity 设置用户所拥有的全部身份
message SetUserAllIdentityRequest
{
    fixed64 userid = 1;
    UserIdentity identitys = 2;
}

message SetUserBaseInfoRequest{ 
    UserBaseInfo user_info =1; 
    int32 operatorid = 2;
    int32 from_os = 3;
}

enum USER_INFO_TYPE
{
    USER_INFO_TYPE_None = 0;
    USER_INFO_TYPE_UserName = 1;
    USER_INFO_TYPE_Sex = 2;
    USER_INFO_TYPE_CityId = 3;
    USER_INFO_TYPE_BirthDay = 4;
    USER_INFO_TYPE_Mood = 5;
	USER_INFO_TYPE_CustomFace = 6;
	USER_INFO_TYPE_DefaultFace = 7;
}

message SetUserInfoItemRequest{ 
    int64 userid =1;     //客户端指令，第一个字段总是自己的id
    USER_INFO_TYPE info_type = 2;
    string value = 3;
    int32 operatorid = 4;
    int32 from_os = 5;
}

//设置用户验证好友方式
message SetUserFriendCheckRequest
{
    fixed64 userid = 1;
    FREIND_CHECK_TYPE friend_check = 2;
}

//获取用户验证好友方式
message GetUserFriendCheckRequest
{
    fixed64 userid = 1;
}

message GetUserFriendCheckResponse
{
    RPC_CALL_RESULT result = 1;
    fixed64 userid = 2;
    FREIND_CHECK_TYPE friend_check = 3;
}

//绑定/修改 手机
message BindMobileRequest
{
    fixed64 userid = 1;
    string mobile_phone = 2;
} 

//------------------------------------------------------------------------------ 查询
 
// GetMyBaseInfo 获取登录者基本信息
message GetMyBaseInfoRequest
{
    fixed64 userid = 1;
}


message GetMyBaseInfoResponse
{
    RPC_CALL_RESULT result = 1;
    //基本信息
    UserBaseInfo baseinfo = 2;
    
    string email = 3;
    
    //偏好设置
    FREIND_CHECK_TYPE friend_check = 4;

    
    
    //其他设置..
}

// GetUserBaseInfo 获取其他用户基本信息
message GetUserBaseInfoRequest
{
    repeated fixed64 userid = 1;
}

message GetUserBaseInfoResponse
{
    RPC_CALL_RESULT result = 1;
    
    repeated UserBaseInfo list = 2;
}

// GetUserSimpleInfo 获取其他用户简单信息
message GetUserSimpleRequest
{
    repeated fixed64 userid = 1;
}

message GetUserSimpleResponse
{
    RPC_CALL_RESULT result = 1;
    
    repeated UserSimpleInfo list = 2;
}

// QueryUserBaseInfoByCBId 根据 cb id 查询用户基本信息
message QueryUserBaseInfoByCBIdRequest
{
    string cb_id = 1;
}

message QueryUserBaseInfoByCBIdResponse
{
    RPC_CALL_RESULT result = 1;    
    UserBaseInfo baseinfo = 2;
}



// SearchUserBaseInfo 搜索用户
message SearchUserBaseInfoRequest
{
    int32 page_size = 1;        //每页条数
    int32 page = 2;            //当前页。如果>总页数，则返回最后一页的数据
    
    string keyword = 3;        //昵称或 cb_id 关键字
    string cityid = 4;         //按城市查找
    USER_SEX sex = 5;          //性别，==""或者为 USER_SEX_INIT 时表示不限
    repeated USER_IDENTITY_TYPE identity = 6;       //身份，==""表示不限
}

message SearchUserBaseInfoResponse
{
    RPC_CALL_RESULT result = 1;
	
	int32 page_size = 2;        //每页条数
    int32 page = 3;             //当前页
    int32 page_count = 4;       //总页数
    int32 record_count = 5;     //总条数
    
    repeated UserBaseInfo list = 6; //当前页结果列表
}
 
message GetUserIdRequest{
	string loginid = 1; //loginid，手机号
    bool get_identity_info = 2;
}

message GetUserIdResponse{
	RPC_CALL_RESULT result = 1;
	uint64 userid = 2;
    UserIdentity identity = 3;
}  


//------------------------------------------------------------------------------ 运维管理
// SetUserStatus 搜索用户
message SetUserStatusRequest
{
    fixed64 userid = 1;
    //待完善
}

message GetBindedPhoneNumberRequest
{
	fixed64 userid = 1;
}

message GetBindedPhoneNumberResponse
{
	RPC_CALL_RESULT result = 1;
	string phone_no = 2;
}
