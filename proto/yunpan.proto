syntax = "proto3";

//yunpan:  管理资源文件存储位置，以及用户的网盘空间

package cfwf.micro_service.yunpan;
option java_package = "com.cfwf.micro_service.yunpan";

service YunPan {
  /*************************
  用户空间
  *************************/
  //获取用户空间大小和已用大小
  rpc GetUserSpace (GetUserSpaceRequest) returns (GetUserSpaceResponse) {}  

  //设置用户空间大小
  rpc SetUserSpace (SetUserSpaceRequest) returns (CommonResponse) {}  

  /*************************
  文件上传
  *************************/
  //由文件上传服务器调用，检查新上传的文件是否已存在和是否可以断点续传
  rpc SearchFileWhenBeginUpload (SearchFileWhenBeginUploadRequest) returns (GetFileListResponse) {}  

  //设置正在上传的文件信息。由文件上传服务器调用，在文件上传中断和完成时时会调用
  rpc SetUploadingFileInfo (FileInfo) returns (CommonResponse) {}

  //设置已上传完成的的文件信息。由文件上传服务器调用，每个用户的每次上传最多调用一次。此函数会扣除用户的剩余空间。
  rpc SetFileUploadedAndBeloneTo (SetFileUploadedAndBeloneToRequest) returns (CommonResponse) {}
  
  /*************************
  对上传后的文件预处理
  *************************/
  //获取已经上传完成等待预处理的文件的列表，由 预处理服务器调用
  rpc GetWaittingPreprocessFileList (CommonRequest) returns (GetFileListResponse) {}
  
  //设置文件预处理完成
  rpc SetFilePreprocessFinish (SetFilePreprocessFinishRequest) returns (CommonResponse) {}
  
  /*************************
  对预处理完成的文件存入fastdfs
  *************************/
  //获取已经预处理完成，等待保存到fast_dfs的文件的列表，由 文件存储服务器调用
  rpc GetWaittingStorageFileList (CommonRequest) returns (GetFileListResponse) {}

  //设置文件的fastdfs_id， 由文件存储服务器在保存文件到fastdfs成功时调用
  rpc SetFileStorageFinish(SetFileStorageFinishRequest) returns (CommonResponse) {}
  
  //设置图片文件的fastdfs_id， 由文件存储服务器在保存图片到fastdfs成功时调用
  rpc SetPicFileStorageFinish (SetPicFileStorageFinishRequest) returns (CommonResponse) {}

  /*************************
  图片文件在存入fastdfs之前进行缩略图处理
  *************************/
  //获取 缩略图 处理类型列表
  rpc GetPicFileThumbnailTypeList (CommonRequest) returns (GetPicFileThumbnailTypeListResponse) {}
  
  //增加 缩略图 处理方式。此时PicFileThumbnailInfo中的 id将被忽略。 为保存已处理过的文件的信息，只能增加，不能修改。 CommonResponse中的 msg 保存新生成的id（如果存在相同处理类型，将不新增，并返回对应的id）
  rpc AddPicFileThumbnailType (PicFileThumbnailInfo) returns (CommonResponse) {}
  
  //获取某种类型的图片文件的默认处理方式
  rpc GetDefaultPicFileThumbnailType (GetDefaultPicFileThumbnailTypeRequest) returns (GetDefaultPicFileThumbnailTypeResponse) {}
  
  //设置某种类型的图片文件的默认处理方式
  rpc SetDefaultPicFileThumbnailType (SetDefaultPicFileThumbnailTypeRequest) returns (CommonResponse) {}
  
  /*************************
  获取文件信息(包括下载地址信息)
  *************************/ 
  rpc GetResFileInfo (GetResFileInfoRequest) returns (GetResFileInfoResponse) {}
    
}

//通用rpc调用返回结果
enum RPC_CALL_RESULT {
   RPC_CALL_RESULT_NONE        = 0;   //不应出现
   RPC_CALL_RESULT_SUCCESS     = 1;   //成功
   RPC_CALL_RESULT_DB_ERROR    = 2;   //数据库出错
   RPC_CALL_RESULT_INPUT_ERROR = 3;   //传入数据有错，格式错误或者找不到对应条目
   RPC_CALL_RESULT_ERROR       = 4;   //其他错误
}

//文件信息
message FileInfo{
    fixed64 userid = 1;         //上传人
	fixed64 fileid = 2;         //文件id，全局唯一
	string filename = 3;        //原始文件名
	fixed64 file_size = 4;      //文件大小， Byte
	fixed64 upload_size = 5;    //已上传大小，Byte
	string md5 = 6;             //文件md5
	string crc = 7;             //文件校验码
	string fastdfs_id = 8;      //文件存储到fastdfs内的文件名
    int32 file_res_type = 9;    //文件资源类型        
    int32 file_server_id = 10;        //文件上传缓存服务器id    
    int32 save_path = 11;       //0=原始缓存位置  1=预处理结果缓存位置   
}

//一般rpc调用传入参数
message CommonRequest{
	string msg = 1;
}

//一般rpc调用返回值
message CommonResponse{
	RPC_CALL_RESULT result = 1;
	string msg = 2;
}

//函数： SetUserSpace 的 传入参数
message SetUserSpaceRequest{
    fixed64 userid = 1;
    fixed64 all_space = 2;
}

//函数： GetUserSpace 的 传入参数
message GetUserSpaceRequest{
    fixed64 userid = 1;
}

//函数： GetUserSpace 的 返回结果
message GetUserSpaceResponse{
    RPC_CALL_RESULT result = 1;
	
	fixed64 userid = 2;
	fixed64 all_space = 3;
	fixed64 used_space = 4;
}

//函数： GetUploadingFileList 的 传入参数
message SearchFileWhenBeginUploadRequest{
	fixed64 filesize = 1;
	string md5 = 2;
	string crc = 3;
    string file_ext = 4;
    int32 file_res_type = 5;
}

//函数： GetUploadingFileList/GetUploadedFileList/ 的 返回结果
message GetFileListResponse{
    RPC_CALL_RESULT result = 1;
	repeated  FileInfo list = 2;
}

//函数： SetFileBeloneTo 的 传入参数
message SetFileUploadedAndBeloneToRequest{
	FileInfo fileinfo = 1;
	int32 belong_type = 2;
    fixed64 belong_to = 3;
}

//函数： SetFilePreprocessFinish 的 传入参数
message SetFilePreprocessFinishRequest{
	fixed64 fileid = 1;     //文件id
    int32  save_path = 2;   //0=原始缓存位置  1=预处理结果缓存位置
    int32 file_status = 3;  //0=上传中 1=上传完，等待预处理 9=预处理完成，等待保存入仓库
}

//函数： SetFileStorageFinish 的 传入参数
message SetFileStorageFinishRequest
{
    fixed64 fileid = 1;     //文件id
    string fastdfs_id = 2;  //保存到 fastdfs 的文件名
}

//函数： SetPicFileStorageFinish 的 传入参数
message SetPicFileStorageFinishRequest{
	fixed64 fileid = 1;           //文件id
    string fastdfs_id = 2;        //原图 fastdfsid
	string pic_size = 3;          //原图尺寸：width*height
	int32 thumbnail_type = 4;     // 缩略图尺寸类型，缩略图的fastdfs_id分别为:fastdfs_id+'_medium'+fastdfs_id+'_small'+ext
} 


//每种图片都有三种压缩规格，但根据 file_res_type不同，压缩后的尺寸可能不同  
enum PIC_FILE_SIZE_TYPE {
   PIC_FILE_SIZE_PRIMARY    = 0;   //原图
   PIC_FILE_SIZE_MEDIUM     = 1;   //中图
   PIC_FILE_SIZE_SMALL      = 2;   //小图
}


enum PIC_FILE_THUMBNAIL_TYPE {
   PIC_FILE_THUMBNAIL_TYPE_STRETCH    = 0;   //按fld_height和fld_width压缩
   PIC_FILE_THUMBNAIL_TYPE_BASE_BY_HEIGHT  = 1; //压缩时不变形，以height为基准压缩
   PIC_FILE_THUMBNAIL_TYPE_BASE_BY_WIDTH  = 2; //压缩时不变形，以fld_width为基准压缩
}

message PicFileThumbnailInfo{
	int32 id = 1;         
    PIC_FILE_THUMBNAIL_TYPE thumbnail_type = 2;    //0=按fld_height和fld_width压缩  1=压缩时不变形，以fld_height为基准压缩  2=压缩时不变形，以fld_width为基准压缩
	int32 middle_height = 3;    
	int32 middle_width = 4;    
    int32 small_height = 5;    
	int32 small_width = 6;    
} 

//获取和设置thumbnail_type
message GetPicFileThumbnailTypeListResponse{
    RPC_CALL_RESULT result = 1;
	repeated  PicFileThumbnailInfo list = 2;
}

message GetDefaultPicFileThumbnailTypeRequest{
    int32 filetype = 1;
}

message GetDefaultPicFileThumbnailTypeResponse{
    RPC_CALL_RESULT result = 1;
    int32 filetype = 2;
	PicFileThumbnailInfo info = 3;
}

message SetDefaultPicFileThumbnailTypeRequest{
    int32 filetype = 1;
    int32 thumbnail_type = 2;
}

///////////////////////
message ResFileInfo
{
    int64    file_resid = 1;
    string   fastdfs_id = 2;  
    int32    res_type = 3;
    int64    file_size = 4;
    string   file_name = 5;
    bool     is_pic_file = 6;
    string   download_url = 7;
       
};
message GetResFileInfoRequest{ 
    repeated int64 res_fileid = 1;
}

message GetResFileInfoResponse{ 
    RPC_CALL_RESULT result = 1;
    repeated ResFileInfo res_files = 2;
}
  